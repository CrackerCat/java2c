_program_helpMessage_description="Builds projects using CMake"
_program_helpMessage_optionsAndNonOptions=" -- [build_projects...]"
_program_helpMessage_usageMessage="Build projects"
_program_helpMessage_argumentedOptions=""
_program_helpMessage_argumentlessOptions=""
_program_helpMessage_nonOptionArguments="build_projects is a list of projects to build"

_program_parseCommandLineLongOption()
{
	case "$OPTARG" in
		
		*)
			global_parseCommandLine_longOptionUnknown
		;;
		
	esac
}

_program_parseCommandLineShortOption()
{
	case "$option" in
		
		*)
			:
		;;
		
	esac
}

_program_parseNonOptionArguments()
{
	if [ $# -eq 0 ]; then
		global_exitError "No projects specified"
	fi
	
	# TODO: Not sh friendly, and objects violently if dash as a syntax error!
	# Problem is we want to preserve in an array if using bash 4...
	#build_projects=("$@")
}


global_uses cpucount

core_program_functionRegister cpucount_computeMakeJobsAndLoadAverage

build_prepareOutputPath()
{
	if [ -d "$build_outputPath" ]; then
		return 0
	fi
	
	if [ -e "$build_outputPath" ]; then
		rm -rf "$build_outputPath"
	fi
	
	mkdir -m 0755 -p "$build_outputPath"
}
core_program_functionRegister build_prepareOutputPath

_build_initialiseCMake()
{
	# cmake initialises whateer folder is PWD
	pushd "$projectBuildPath"
		
		cmake "$projectSourcePath" 1>"$projectBuildPath"/cmake.config.txt 2>/dev/null
		
	popd 1>/dev/null
}

build_compileProjects()
{
	local project
	local projectSourcePath
	local projectBuildPath
	for project in "${build_projects[@]}"
	do
		projectSourcePath="$build_sourcePath"/"$project"
		if [ ! -d "$projectSourcePath" ]; then
			global_exitError "Project '$project' is not in build_sourcePath '$build_sourcePath'"
		fi
		
		projectBuildPath="$build_outputPath"/"$project"
		if [ -e "$projectBuildPath" ]; then
			rm -rf "$projectBuildPath"
		fi
		mkdir -m 0755 -p "$projectBuildPath"
		
		_build_initialiseCMake

		# target could be 'clean', or we could clean first, with --clean-first
		cmake --build "$projectBuildPath" --target "$project" --clean-first --use-stderr -- --jobs "$cpucount_makeJobs" --load-average "$cpucount_makeLoadAverage"
	done
}
core_program_functionRegister build_compileProjects
