core_compatibility_dirname()
{
	local converted="${1%/*}"
	if [ "$converted" = "$1" ]; then
		printf '%s' '.'
	else
		printf '%s' "$converted"
	fi
}

_core_compatibility_builtInDoesNotExist()
{
	local builtInName="$1"
	local value="$(PATH='' core_compatibility_which "$builtInName")"
	if [ "$builtInName" = "$value" ]; then
		return 1
	fi
	return 0
}

core_compatibility_setVariable()
{
	eval "$1='$2'"
}

core_compatibility_setWithoutQuotesVariable()
{
	eval "$1=$2"
}

core_compatibility_setVariableIfUnset()
{
	local variableName="$1"
	local variableDefaultValue="$2"
	
	# This is not whitespace-safe: eval "$variableName=\"\${$variableName-$variableDefaultValue}\""
	if core_compatibility_testVariableIsUnset "$variableName"; then
		eval "$variableName='$variableDefaultValue'"
	fi
}

core_compatibility_testVariableIsUnset()
{
	local variableName="$1"
	eval "[ \"\${$variableName+unset}\" != 'unset' ]"
}

# dash by default escapes backslashes, other echos behave differently. This way is defensive.
core_compatibility_echo()
{
	printf '%s\n' "$1"
}

core_usesIn functions

core_compatibility_execute()
{
	core_functions_execute core_compatibility_functions
}

core_compatibility_setSaneShellOptions()
{
	:
}
core_functions_register core_compatibility_functions core_compatibility_setSaneShellOptions

core_compability_installPushdAndPopd()
{
	# bash, zsh are known to support this
	if core_compatibility_builtInDoesNotExist pushd; then
		
		if ! core_compatibility_builtInDoesNotExist popd; then
			core_exitError "Weird shell does not have pushd but does have popd (?feature detection bug?)!"
		fi
		
		_core_init_compatibility_pushdCount=0

		pushd()
		{
			local path="$1"
			eval "core_init_pushdStack${_core_init_compatibility_pushdCount}='$(pwd)'"
			_core_init_compatibility_pushdCount=$((_core_init_compatibility_pushdCount+1))
			cd "$path" 1>/dev/null
		}

		popd()
		{
			_core_init_compatibility_pushdCount=$((_core_init_compatibility_pushdCount-1))
			eval "local path=\"\$core_init_pushdStack${_core_init_compatibility_pushdCount}\""
			eval "unset core_init_pushdStack${_core_init_compatibility_pushdCount}"
			cd "$path" 1>/dev/null
		}
	
	else
		
		pushd()
		{
			builtin pushd "$@" 1>/dev/null
		}
	
		popd()
		{
			builtin popd "$@" 1>/dev/null
		}
		
	fi
}
core_functions_register core_compatibility_functions core_compability_installPushdAndPopd

core_compability_installSource()
{
	# bash, zsh are known to support this
	if core_compatibility_builtInDoesNotExist source; then
		
		source()
		{
			. "$@"
		}
		
	fi
}
core_functions_register core_compatibility_functions core_compability_installSource

