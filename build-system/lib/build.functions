# Might be needed in help text
_program_default_build_sourcePath="$global_ourSymlinkPath"/source
_program_default_build_outputPath="$global_ourSymlinkPath"/output

_program_commandLine_helpMessage_description="Builds projects using CMake"
_program_commandLine_helpMessage_optionsAndNonOptions=" -- [build_projects...]"
_program_commandLine_helpMessage_usageMessage="Build projects"
_program_commandLine_helpMessage_argumentedOptions=""
_program_commandLine_helpMessage_argumentlessOptions=""
_program_commandLine_helpMessage_nonOptionArguments="build_projects is a list of projects to build"

_program_commandLine_handleShortOption()
{
	case "$option" in
		
		*)
			:
		;;
		
	esac
}

_program_commandLine_handleLongOption()
{
	case "$OPTARG" in
		
		*)
			init_parseCommandLine_longOptionUnknown
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	if [ $# -eq 0 ]; then
		global_exitError "No projects specified"
	fi
	
	# TODO: Not sh friendly, and objects violently if dash as a syntax error!
	# Problem is we want to preserve in an array if using bash 4...
	
	xxxx: initialise varargs
	#build_projects=("$@")
}

_program_commandLine_validate()
{
	init_compatibility_setVariableIfUnset build_sourcePath "$_program_default_build_sourcePath"
	init_compatibility_setVariableIfUnset build_outputPath "$_program_default_build_outputPath"
		
	if [ ! -e "$build_sourcePath" ]; then
		global_exitError "The build_sourcePath '$build_sourcePath' does not exist"
	fi
	if [ ! -d "$build_sourcePath" ]; then
		global_exitError "The build_sourcePath '$build_sourcePath' is not a directory"
	fi
	if [ ! -r "$build_sourcePath" ]; then
		global_exitError "The build_sourcePath '$build_sourcePath' is not a readable directory"
	fi
	if [ ! -r "$build_sourcePath" ]; then
		global_exitError "The build_sourcePath '$build_sourcePath' is not a searchable directory"
	fi
	
	# build_outputPath may not exist at this point in time
}



core_uses cpucount
core_functions_register core_functions cpucount_computeMakeJobsAndLoadAverage

build_prepareOutputPath()
{
	xxxx: Build Lock
	
	if [ -d "$build_outputPath" ]; then
		return 0
	fi
	
	if [ -e "$build_outputPath" ]; then
		rm -rf "$build_outputPath"
	fi
	
	mkdir -m 0755 -p "$build_outputPath"
}
core_functions_register core_functions build_prepareOutputPath

_build_initialiseCMake()
{
	# cmake initialises whateer folder is PWD
	pushd "$projectBuildPath"
		
		cmake "$projectSourcePath" 1>"$projectBuildPath"/cmake.config.txt 2>/dev/null
		
	popd 1>/dev/null
}

build_compileProjects()
{
	local project
	local projectSourcePath
	local projectBuildPath
	for project in "${build_projects[@]}"
	do
		projectSourcePath="$build_sourcePath"/"$project"
		if [ ! -d "$projectSourcePath" ]; then
			global_exitError "Project '$project' is not in build_sourcePath '$build_sourcePath'"
		fi
		
		projectBuildPath="$build_outputPath"/"$project"
		if [ -e "$projectBuildPath" ]; then
			rm -rf "$projectBuildPath"
		fi
		mkdir -m 0755 -p "$projectBuildPath"
		
		_build_initialiseCMake

		# target could be 'clean', or we could clean first, with --clean-first
		cmake --build "$projectBuildPath" --target "$project" --clean-first --use-stderr -- --jobs "$cpucount_makeJobs" --load-average "$cpucount_makeLoadAverage"
	done
}
core_functions_register core_functions build_compileProjects
